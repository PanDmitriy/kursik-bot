import { InlineKeyboard } from "grammy";

/**
 * –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
 */
export class NavigationManager {
  private static breadcrumbs = new Map<number, string[]>();

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
   */
  static addBreadcrumb(chatId: number, level: string) {
    const current = this.breadcrumbs.get(chatId) || [];
    current.push(level);
    this.breadcrumbs.set(chatId, current);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
   */
  static removeLastBreadcrumb(chatId: number) {
    const current = this.breadcrumbs.get(chatId) || [];
    if (current.length > 0) {
      current.pop();
      this.breadcrumbs.set(chatId, current);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
   */
  static getBreadcrumbs(chatId: number): string[] {
    return this.breadcrumbs.get(chatId) || [];
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
   */
  static clearBreadcrumbs(chatId: number) {
    this.breadcrumbs.delete(chatId);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
   */
  static createNavigationKeyboard(
    chatId: number,
    additionalButtons: Array<{text: string, callback_data: string}> = []
  ): InlineKeyboard {
    const keyboard = new InlineKeyboard();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    for (const button of additionalButtons) {
      keyboard.text(button.text, button.callback_data);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumbs = this.getBreadcrumbs(chatId);
    if (breadcrumbs.length > 1) {
      keyboard.row();
      keyboard.text("üîô –ù–∞–∑–∞–¥", "nav_back");
    }
    
    // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");
    
    return keyboard;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatBreadcrumbs(chatId: number): string {
    const breadcrumbs = this.getBreadcrumbs(chatId);
    if (breadcrumbs.length === 0) return "";
    
    return `üìç <b>${breadcrumbs.join(" > ")}</b>\n\n`;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   */
  static createBackButton(targetCallback: string): {text: string, callback_data: string} {
    return {
      text: "üîô –ù–∞–∑–∞–¥",
      callback_data: targetCallback
    };
  }
}

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
export const NAVIGATION_LEVELS = {
  MAIN: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
  RATES: "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç",
  RATE_DETAIL: "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã",
  SUBSCRIPTIONS: "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
  SUBSCRIBE: "–ü–æ–¥–ø–∏—Å–∫–∞",
  UNSUBSCRIBE: "–û—Ç–ø–∏—Å–∫–∞",
  SETTINGS: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
  TIMEZONE: "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
  STATS: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
  HELP: "–ü–æ–º–æ—â—å",
  ALL_CURRENCIES: "–í—Å–µ –≤–∞–ª—é—Ç—ã"
} as const;
