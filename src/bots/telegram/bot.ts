import { Bot, Context, InlineKeyboard } from "grammy";
import { config } from "dotenv";
import { handleRate, handleRateCallback, getAllRates, formatAllRates } from "../../features/rates/rate.handler";
import {
  handleSubscribe,
  handleSubscribeCurrency,
  handleSubscribeTime,
  handleSubscribeTypeSelect,
  handleSubscribeTypeSelectFromRate,
} from "../../features/subscribe/subscribe.handler";
import {
  handleUnsubscribe,
  handleUnsubscribeCallback,
  handleUnsubscribeType
} from "../../features/subscribe/unsubscribe.handler";
import { handleListSubscriptions } from "../../features/subscribe/list.handler";
import { startNotifier } from "../../features/notifier/notifier";
import { handleUnsubscribeChangeCallback } from "../../features/subscribe_change/unsubscribe_change.handler";
import {
  handleSetTimezone,
  handleLocation,
  handleLocationRequest,
  handleManualTimezone,
  handleTimezoneText,
  handleTimezoneSearch,
  handleTimezoneSearchQuery,
  handleTimezoneRegions,
  handleTimezoneRegion,
  handleTimezoneCallback,
} from "../../features/timezone/timezone.handler";
import {
  handleMainMenu,
  handleMenuCallback,
  handleSettingsMenu,
  handleStatsMenu,
  handleHelpMenu,
  handleHelpCommands,
  handleHelpFaq,
} from "../../features/menu/menu.handler";


// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
config();

const bot = new Bot<Context>(process.env.BOT_TOKEN!);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name || "–¥—Ä—É–≥"}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–º—É —Ä—É–±–ª—é (BYN).

üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/rate [–∫–æ–¥ –≤–∞–ª—é—Ç—ã] ‚Äî –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ BYN (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é USD)
/subscribe ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫—É—Ä—Å–∞
/unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/subscriptions ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
/set_timezone ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!`,
    { parse_mode: "HTML" }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.command("menu", handleMainMenu);

// –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å
bot.command("help", async (ctx) => {
  await handleHelpMenu(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ /rate
bot.command("rate", handleRate);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ "–í—Å–µ –≤–∞–ª—é—Ç—ã" - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ handleRateCallback
bot.callbackQuery("rate_all", async (ctx) => {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  try {
    await ctx.answerCallbackQuery("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤—Å–µ—Ö –≤–∞–ª—é—Ç...");
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
  }
  
  const rates = await getAllRates();
  
  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  const keyboard = new InlineKeyboard()
    .text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "rate_all")
    .row()
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");
  
  await ctx.reply(
    formatAllRates(rates),
    {
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
});

bot.on("callback_query:data", handleRateCallback);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π)
bot.command("subscribe", handleSubscribe);
bot.callbackQuery("sub_type_daily", handleSubscribeTypeSelect);
bot.callbackQuery("sub_type_change", handleSubscribeTypeSelect);
bot.callbackQuery(/sub_type_select_/, handleSubscribeTypeSelectFromRate);
bot.callbackQuery(/sub_currency_/, handleSubscribeCurrency);
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:mm
bot.hears(/^([01]?\d|2[0-3]):([0-5]\d)$/, handleSubscribeTime);

// –ö–æ–ª–±—ç–∫ —É–¥–∞–ª–µ–Ω–∏—è change-–ø–æ–¥–ø–∏—Å–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–¥–∞–ª–µ–Ω–∏—è)
bot.callbackQuery(/unsubchg_/, handleUnsubscribeChangeCallback);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø–∏—Å–∫–∏
bot.command("unsubscribe", handleUnsubscribe);
bot.callbackQuery(/unsub_/, handleUnsubscribeCallback);
bot.callbackQuery(/unsub_type_/, handleUnsubscribeType);

// –ö–æ–º–∞–Ω–¥–∞ /subscriptions
bot.command("subscriptions", handleListSubscriptions);

// –ö–æ–º–∞–Ω–¥–∞ /set_timezone
bot.command("set_timezone", handleSetTimezone);
bot.on(":location", handleLocation);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
bot.callbackQuery("tz_location", handleLocationRequest);
bot.callbackQuery("tz_list", handleManualTimezone);
bot.callbackQuery("tz_search", handleTimezoneSearch);
bot.callbackQuery("tz_regions", handleTimezoneRegions);
bot.callbackQuery("tz_popular", handleManualTimezone);

bot.callbackQuery(/^tz_region_/, async (ctx) => {
  const regionName = ctx.callbackQuery.data.replace("tz_region_", "");
  await handleTimezoneRegion(ctx, regionName);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
bot.callbackQuery(/^tz_[A-Za-z]+\/[A-Za-z_]+$/, async (ctx) => {
  const timezoneId = ctx.callbackQuery.data.replace("tz_", "");
  await handleTimezoneCallback(ctx, timezoneId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
bot.hears(/^[A-Za-z–ê-–Ø–∞-—è\s]+$/, handleTimezoneText);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º menu_)
bot.callbackQuery("menu_subscribe", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
  }
  await handleSubscribe(ctx);
});

bot.callbackQuery("menu_unsubscribe", async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
  }
  await handleUnsubscribe(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.callbackQuery(/^menu_/, handleMenuCallback);

bot.callbackQuery(/^settings_/, async (ctx) => {
  const data = ctx.callbackQuery?.data;
  if (data === "settings_timezone") {
    await handleSetTimezone(ctx);
  } else if (data === "settings_notifications") {
    await ctx.reply("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
  }
  try {
    await ctx.answerCallbackQuery();
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
  }
});
bot.callbackQuery(/^help_/, async (ctx) => {
  const data = ctx.callbackQuery?.data;
  if (data === "help_commands") {
    await handleHelpCommands(ctx);
  } else if (data === "help_faq") {
    await handleHelpFaq(ctx);
  }
  try {
    await ctx.answerCallbackQuery();
  } catch {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
  }
});


// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch = (err: any) => {
  const ctx = err.ctx as Context;
  const error = err.error as any;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
  if (error?.error_code === 400 && error?.description?.includes("too old")) {
    console.log(`[BOT] Ignoring expired callback query: ${ctx.callbackQuery?.data || "unknown"}`);
    return;
  }
  
  console.error(`[BOT] Error in middleware:`, error);
  console.error(`[BOT] Update:`, ctx.update);
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
  if (ctx.callbackQuery) {
    ctx.answerCallbackQuery({
      text: "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      show_alert: false
    }).catch(() => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback
    });
  } else if (ctx.message) {
    ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.").catch(() => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    });
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
startNotifier(bot);

export { bot };
