import { Context, InlineKeyboard } from "grammy";
import { getExchangeRate, getEnhancedExchangeRate, EnhancedRateData } from "../../shared/api/exchange";
import { NavigationManager, NAVIGATION_LEVELS } from "../../shared/utils/navigation";

export const AVAILABLE_CURRENCIES = ["USD", "EUR", "RUB", "CNY", "PLN"];

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤—Å–µ—Ö –≤–∞–ª—é—Ç
 */
export async function getAllRates(): Promise<EnhancedRateData[]> {
  const rates: EnhancedRateData[] = [];
  
  for (const currency of AVAILABLE_CURRENCIES) {
    try {
      const rate = await getEnhancedExchangeRate(currency);
      if (rate) {
        rates.push(rate);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${currency}:`, error);
    }
  }
  
  return rates;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
 */
export function formatAllRates(rates: EnhancedRateData[]): string {
  if (rates.length === 0) {
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç";
  }
  
  const lines = rates.map(rate => {
    const { currency, rate: value, scale, change, changePercent, trend } = rate;
    const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
    const changeEmoji = trend === 'up' ? 'üü¢' : trend === 'down' ? 'üî¥' : '‚ö™';
    
    let changeText = '';
    if (change !== undefined && changePercent !== undefined) {
      const changeSign = change > 0 ? '+' : '';
      changeText = ` ${changeEmoji}${changeSign}${changePercent.toFixed(1)}%`;
    }
    
    return `${trendEmoji} <b>${currency}</b>: ${value.toFixed(4)} BYN${changeText}`;
  });
  
  return `üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ BYN</b>

${lines.join('\n')}

üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
üèõÔ∏è <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ù–ë–†–ë`;
}

export async function handleRate(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.RATES);

  const keyboard = new InlineKeyboard();

  for (const code of AVAILABLE_CURRENCIES) {
    keyboard.text(code, `rate_${code}`);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –≤–∞–ª—é—Ç—ã"
  keyboard.row().text("üìä –í—Å–µ –≤–∞–ª—é—Ç—ã", "rate_all");

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const navKeyboard = NavigationManager.createNavigationKeyboard(chatId, [
    { text: "üìä –í—Å–µ –≤–∞–ª—é—Ç—ã", callback_data: "rate_all" }
  ]);

  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  await ctx.reply(
    `${breadcrumbs}üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`,
    { 
      reply_markup: navKeyboard,
      parse_mode: "HTML"
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
export async function handleRateCallback(ctx: Context, next: () => Promise<void>) {
  const callbackData = ctx.callbackQuery?.data;

  if (!callbackData || !callbackData.startsWith("rate_")) return next();

  const currency = callbackData.replace("rate_", "");

  const result = await getEnhancedExchangeRate(currency);

  if (result) {
    await ctx.answerCallbackQuery(); // —É–±–∏—Ä–∞–µ—Ç "–∑–∞–≥—Ä—É–∑–∫–∞..."
    
    const chatId = ctx.chat?.id;
    if (chatId) {
      // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
      NavigationManager.addBreadcrumb(chatId, `${NAVIGATION_LEVELS.RATE_DETAIL} ${currency}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    const navKeyboard = NavigationManager.createNavigationKeyboard(chatId!, [
      { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: `rate_${currency}` },
      { text: "üìä –í—Å–µ –≤–∞–ª—é—Ç—ã", callback_data: "rate_all" },
      { text: "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data: `sub_currency_${currency}` }
    ]);
    
    const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId!);
    
    await ctx.reply(
      `${breadcrumbs}${formatEnhancedRate(result)}`,
      {
        reply_markup: navKeyboard,
        parse_mode: "HTML"
      }
    );
  } else {
    await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞", show_alert: true });
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
 */
function formatEnhancedRate(data: EnhancedRateData): string {
  const { rate, scale, currency, change, changePercent, trend, date } = data;
  
  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏)
  const changeEmoji = trend === 'up' ? 'üü¢' : trend === 'down' ? 'üî¥' : '‚ö™';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  let changeText = '';
  if (change !== undefined && changePercent !== undefined) {
    const changeSign = change > 0 ? '+' : '';
    changeText = `\n${changeEmoji} <b>${changeSign}${change.toFixed(4)}</b> (${changeSign}${changePercent.toFixed(2)}%)`;
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formattedDate = new Date(date).toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
  
  return `üí± <b>${currency} –∫ BYN</b>

üí∞ <b>${scale} ${currency} = ${rate.toFixed(4)} BYN</b>
${trendEmoji} <b>–¢—Ä–µ–Ω–¥:</b> ${getTrendText(trend)}
${changeText}

üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
üèõÔ∏è <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ù–ë–†–ë`;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
 */
function getTrendText(trend?: 'up' | 'down' | 'stable'): string {
  switch (trend) {
    case 'up': return '–†–æ—Å—Ç';
    case 'down': return '–ü–∞–¥–µ–Ω–∏–µ';
    case 'stable': return '–°—Ç–∞–±–∏–ª—å–Ω–æ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
