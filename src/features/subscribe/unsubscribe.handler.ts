import { Context, InlineKeyboard } from "grammy";
import { getUserSubscriptions, removeSubscription } from "../../entities/user/user.repo";
import { handleUnsubscribeChange } from "../subscribe_change/unsubscribe_change.handler";

export async function handleUnsubscribe(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  const keyboard = new InlineKeyboard()
    .text("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", "unsub_type_daily")
    .row()
    .text("üîî –ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é", "unsub_type_change")
    .row()
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

  await ctx.reply(
    `‚ùå <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`,
    { reply_markup: keyboard, parse_mode: "HTML" }
  );
}

export async function handleUnsubscribeCallback(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith("unsub_")) return next();
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –¥–∞–ª—å—à–µ
  if (data.startsWith("unsub_type_")) {
    return next();
  }

  // –ü–∞—Ä—Å–∏–º callback data: unsub_CURRENCY_HOUR_MINUTE –∏–ª–∏ unsub_CURRENCY (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "unsub_"
  const rest = data.replace("unsub_", "");
  const chatId = ctx.chat?.id;
  if (!chatId) return next();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ü–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (—á–∞—Å –∏ –º–∏–Ω—É—Ç–∞)
  // –§–æ—Ä–º–∞—Ç: CURRENCY_HOUR_MINUTE
  const match = rest.match(/^(.+)_(\d{1,2})_(\d{1,2})$/);
  
  if (match) {
    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: unsub_CURRENCY_HOUR_MINUTE
    const [, currency, hourStr, minuteStr] = match;
    const hour = parseInt(hourStr, 10);
    const minute = parseInt(minuteStr, 10);
    
    console.log(`[UNSUBSCRIBE] –ü–∞—Ä—Å–∏–Ω–≥ callback: data=${data}, rest=${rest}, currency=${currency}, hour=${hour}, minute=${minute}`);
    
    if (isNaN(hour) || isNaN(minute) || hour < 0 || hour > 23 || minute < 0 || minute > 59) {
      await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞" });
      return next();
    }

    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const currentSubs = getUserSubscriptions(chatId);
    console.log(`[UNSUBSCRIBE] –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è chatId=${chatId}:`, JSON.stringify(currentSubs));

    const deleted = removeSubscription(chatId, currency, hour, minute);
    if (deleted) {
      await ctx.answerCallbackQuery({ text: `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ${currency} –Ω–∞ ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")} —É–¥–∞–ª–µ–Ω–∞.` });
      await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${currency} –≤ ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
    } else {
      console.error(`[UNSUBSCRIBE] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: chatId=${chatId}, currency=${currency}, hour=${hour}, minute=${minute}`);
      await ctx.answerCallbackQuery({ text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ${currency} –Ω–∞ ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}` });
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    }
  } else {
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: unsub_CURRENCY
    const currency = rest;
    const deleted = removeSubscription(chatId, currency);
    if (deleted) {
      await ctx.answerCallbackQuery({ text: `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è ${currency} —É–¥–∞–ª–µ–Ω–∞.` });
      await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${currency} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
    } else {
      console.error(`[UNSUBSCRIBE] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: chatId=${chatId}, currency=${currency}`);
      await ctx.answerCallbackQuery({ text: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ${currency}` });
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    }
  }
}

export async function handleUnsubscribeType(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data || !data.startsWith("unsub_type_")) return next();

  const chatId = ctx.chat?.id;
  if (!chatId) return next();

  await ctx.answerCallbackQuery();

  if (data === "unsub_type_daily") {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    const subs = getUserSubscriptions(chatId);

    if (subs.length === 0) {
      const keyboard = new InlineKeyboard()
        .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");
      await ctx.reply(
        `‚ùå <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö</b>

‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`,
        { reply_markup: keyboard, parse_mode: "HTML" }
      );
      return;
    }

    const keyboard = new InlineKeyboard();
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤–∞–ª—é—Ç–∞ + –≤—Ä–µ–º—è
    for (const { currency, hour, minute } of subs) {
      keyboard.text(
        `${currency} ‚Äî ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`,
        `unsub_${currency}_${hour}_${minute}`
      );
      keyboard.row();
    }
    keyboard.text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

    await ctx.reply(
      `‚ùå <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö</b>

–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:`,
      { reply_markup: keyboard, parse_mode: "HTML" }
    );
    return;
  }

  if (data === "unsub_type_change") {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ change-–ø–æ–¥–ø–∏—Å–æ–∫
    await handleUnsubscribeChange(ctx);
    return;
  }
}
