import { Context, InlineKeyboard } from "grammy";
import { getUserSubscriptions, removeSubscription } from "../../entities/user/user.repo";
import { NavigationManager, NAVIGATION_LEVELS } from "../../shared/utils/navigation";
import { handleUnsubscribeChange } from "../subscribe_change/unsubscribe_change.handler";

export async function handleUnsubscribe(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.UNSUBSCRIBE);

  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  const keyboard = new InlineKeyboard()
    .text("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", "unsub_type_daily")
    .row()
    .text("üîî –ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é", "unsub_type_change");

  await ctx.reply(
    `${breadcrumbs}‚ùå <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`,
    { reply_markup: keyboard, parse_mode: "HTML" }
  );
}

export async function handleUnsubscribeCallback(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith("unsub_")) return next(); 

  const currency = data.replace("unsub_", "");
  const chatId = ctx.chat?.id;
  if (!chatId) return next();

  removeSubscription(chatId, currency);
  await ctx.answerCallbackQuery({ text: `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è ${currency} —É–¥–∞–ª–µ–Ω–∞.` });
  await ctx.reply(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${currency} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
}

export async function handleUnsubscribeType(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data || !data.startsWith("unsub_type_")) return next();

  const chatId = ctx.chat?.id;
  if (!chatId) return next();

  await ctx.answerCallbackQuery();

  if (data === "unsub_type_daily") {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    const subs = getUserSubscriptions(chatId);
    const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

    if (subs.length === 0) {
      const navKeyboard = NavigationManager.createNavigationKeyboard(chatId);
      await ctx.reply(
        `${breadcrumbs}‚ùå <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö</b>

‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`,
        { reply_markup: navKeyboard, parse_mode: "HTML" }
      );
      return;
    }

    const keyboard = new InlineKeyboard();
    for (const { currency, hour, minute } of subs) {
      keyboard.text(
        `${currency} ‚Äî ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`,
        `unsub_${currency}`
      );
    }

    const navKeyboard = NavigationManager.createNavigationKeyboard(chatId);
    await ctx.reply(
      `${breadcrumbs}‚ùå <b>–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö</b>

–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`,
      { reply_markup: navKeyboard, parse_mode: "HTML" }
    );
    return;
  }

  if (data === "unsub_type_change") {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ change-–ø–æ–¥–ø–∏—Å–æ–∫
    await handleUnsubscribeChange(ctx);
    return;
  }
}
