import { Context, InlineKeyboard } from "grammy";
import { AVAILABLE_CURRENCIES } from "../rates/rate.handler";
import { addSubscription, getUserTimezone, getUserSubscriptions } from "../../entities/user/user.repo";
import { addChangeSubscription } from "../../entities/user/change.repo";
import { isPremium } from "../../shared/services/premium.service";
import { TimezoneService } from "../../shared/services/timezone.service";

// –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ chatId
const pendingTimeByChatId = new Map<number, string>();

export async function handleSubscribe(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  const keyboard = new InlineKeyboard()
    .text("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "sub_type_daily")
    .row()
    .text("üîî –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏", "sub_type_change")
    .row()
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

  await ctx.reply(
    `üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleSubscribeTypeSelect(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data || (data !== "sub_type_daily" && data !== "sub_type_change")) return next();

  const chatId = ctx.chat?.id;
  if (!chatId) return next();

  await ctx.answerCallbackQuery();

  const keyboard = new InlineKeyboard();
  for (const code of AVAILABLE_CURRENCIES) {
    if (data === "sub_type_daily") {
      keyboard.text(code, `sub_currency_daily_${code}`);
    } else {
      keyboard.text(code, `sub_currency_change_${code}`);
    }
  }
  keyboard.row().text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

  const typeText = data === "sub_type_daily" ? "–µ–∂–µ–¥–Ω–µ–≤–Ω—É—é" : "–ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—É—Ä—Å–∞";
  await ctx.reply(
    `üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>

–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è ${typeText} –ø–æ–¥–ø–∏—Å–∫–∏:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã
 */
export async function handleSubscribeTypeSelectFromRate(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith("sub_type_select_")) return next();

  const chatId = ctx.chat?.id;
  if (!chatId) return next();

  await ctx.answerCallbackQuery();

  const currency = data.replace("sub_type_select_", "");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!AVAILABLE_CURRENCIES.includes(currency)) {
    await ctx.reply(`‚ùå –í–∞–ª—é—Ç–∞ ${currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.`);
    return;
  }

  const keyboard = new InlineKeyboard()
    .text("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", `sub_currency_daily_${currency}`)
    .row()
    .text("üîî –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏", `sub_currency_change_${currency}`)
    .row()
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

  await ctx.reply(
    `üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${currency}</b>

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleSubscribeCurrency(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith("sub_currency_")) return next();

  await ctx.answerCallbackQuery();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
  if (data.startsWith("sub_currency_daily_")) {
    const currency = data.replace("sub_currency_daily_", "");
    const chatId = ctx.chat?.id;
    if (!chatId) return next();
    
    pendingTimeByChatId.set(chatId, currency);
    await ctx.reply(
      `–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è <b>${currency}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:45).`,
      { parse_mode: "HTML" }
    );
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é
  if (data.startsWith("sub_currency_change_")) {
    const currency = data.replace("sub_currency_change_", "");
    const chatId = ctx.chat?.id;
    if (!chatId) return next();
    
    if (!isPremium(chatId)) {
      await ctx.reply("üîí –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—É—Ä—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏.");
      return;
    }
    addChangeSubscription(chatId, currency);
    await ctx.reply(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∫—É—Ä—Å–∞ –¥–ª—è <b>${currency}</b> –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.`, { parse_mode: "HTML" });
    return;
  }
}

export async function handleSubscribeTime(ctx: Context, next: () => Promise<void>) {
  const text = ctx.message?.text?.trim();
  const chatId = ctx.chat?.id;
  if (!text || !chatId) return next();

  const pendingCurrency = pendingTimeByChatId.get(chatId);
  if (!pendingCurrency) return next();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:mm
  const match = text.match(/^(\d{1,2}):(\d{1,2})$/);
  if (!match) {
    await ctx.reply(
      `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è <b>${pendingCurrency}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:45).`,
      { parse_mode: "HTML" }
    );
    return;
  }

  const hour = parseInt(match[1], 10);
  const minute = parseInt(match[2], 10);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤ (0-23)
  if (hour < 0 || hour > 23) {
    await ctx.reply(
      `‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤</b>\n\n–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00 –¥–æ 23.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è <b>${pendingCurrency}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:45).`,
      { parse_mode: "HTML" }
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –º–∏–Ω—É—Ç (0-59)
  if (minute < 0 || minute > 59) {
    await ctx.reply(
      `‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç</b>\n\n–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00 –¥–æ 59.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è <b>${pendingCurrency}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 18:45).`,
      { parse_mode: "HTML" }
    );
    return;
  }

  const userTimezone = getUserTimezone(chatId);
  const timezoneInfo = TimezoneService.getTimezoneInfo(userTimezone);
  
  addSubscription(chatId, pendingCurrency, hour, minute, userTimezone);
  
  const timezoneDisplay = timezoneInfo?.displayName || userTimezone;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ —É–∂–µ –µ—Å—Ç—å –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã
  const allSubs = getUserSubscriptions(chatId);
  const currencySubs = allSubs.filter(s => s.currency === pendingCurrency);
  
  let additionalMessage = "";
  if (currencySubs.length > 1) {
    additionalMessage = `\n\nüí° <i>–£ —Ç–µ–±—è ${currencySubs.length} –ø–æ–¥–ø–∏—Å–∫–∏(–æ–∫) –Ω–∞ ${pendingCurrency}. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ!</i>`;
  }

  await ctx.reply(
    `‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>

üí∞ –í–∞–ª—é—Ç–∞: <b>${pendingCurrency}</b>
üïê –í—Ä–µ–º—è: <b>${match[0]}</b>
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>${timezoneDisplay}</b>

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
${additionalMessage}

<i>–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /set_timezone</i>`,
    { parse_mode: "HTML" }
  );
  pendingTimeByChatId.delete(chatId);
}

