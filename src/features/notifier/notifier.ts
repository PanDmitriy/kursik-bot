import cron from "node-cron";
import { Bot, InlineKeyboard } from "grammy";
import { DateTime } from "luxon";
import { getAllChatIds, getUserSubscriptions, Subscription } from "../../entities/user/user.repo";
import { getExchangeRate, getEnhancedExchangeRate } from "../../shared/api/exchange";
import { getDistinctChangeCurrencies, getChangeSubscribersByCurrency, getLastRate, setLastRate } from "../../entities/user/change.repo";


// –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
let isDailyNotifierRunning = false;
let isChangeNotifierRunning = false;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
export function startNotifier(bot: Bot) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  cron.schedule("* * * * *", async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (isDailyNotifierRunning) {
      console.warn("[NOTIFIER] –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
      return;
    }

    isDailyNotifierRunning = true;
    
    try {
      // –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–Ω–µ—Ç –º–Ω–æ–≥–æ
      const allChatIds = getAllChatIds();

      for (const chatId of allChatIds) {
        try {
          const subs: Subscription[] = getUserSubscriptions(chatId);

          for (const { currency, hour, minute, timezone } of subs) {
            const now = DateTime.now().setZone(timezone);
            if (now.hour === hour && now.minute === minute) {
              const result = await getEnhancedExchangeRate(currency);
              if (!result) continue;
        
              await sendInteractiveNotification(bot, chatId, result, now, timezone);
            }
          }
        } catch (e) {
          console.error(`[NOTIFIER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è ${chatId}:`, e);
        }
      }
    } catch (e) {
      console.error("[NOTIFIER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:", e);
    } finally {
      isDailyNotifierRunning = false;
    }
  });

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ change_subscriptions
  cron.schedule("* * * * *", async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (isChangeNotifierRunning) {
      console.warn("[NOTIFIER] –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
      return;
    }

    isChangeNotifierRunning = true;

    try {
      const currencies = getDistinctChangeCurrencies();
      if (currencies.length === 0) return;

      for (const currency of currencies) {
        try {
          const current = await getExchangeRate(currency);
          if (!current) continue;

          const prev = getLastRate(currency);
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          if (!prev) {
            setLastRate(currency, current.rate, current.scale);
            continue;
          }

          const hasChanged = current.rate !== prev.rate || current.scale !== prev.scale;
          if (!hasChanged) continue;

          // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const enhanced = await getEnhancedExchangeRate(currency);
          const subscribers = getChangeSubscribersByCurrency(currency);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
          for (const chatId of subscribers) {
            try {
              await sendChangeNotification(bot, chatId, enhanced ?? {
                currency,
                rate: current.rate,
                scale: current.scale,
                date: new Date().toISOString(),
              });
            } catch (e) {
              console.error(`[NOTIFIER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å change-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${chatId} ${currency}:`, e);
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º last_rate –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
          setLastRate(currency, current.rate, current.scale);
        } catch (e) {
          console.error(`[NOTIFIER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è ${currency}:`, e);
        }
      }
    } catch (e) {
      console.error("[NOTIFIER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏:", e);
    } finally {
      isChangeNotifierRunning = false;
    }
  });

  console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã");
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
 */
async function sendInteractiveNotification(
  bot: Bot, 
  chatId: number, 
  rateData: any, 
  now: DateTime, 
  timezone: string
) {
  const { currency, rate, scale, change, changePercent, trend } = rateData;
  
  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
  const changeEmoji = trend === 'up' ? 'üü¢' : trend === 'down' ? 'üî¥' : '‚ö™';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  let changeText = '';
  if (change !== undefined && changePercent !== undefined) {
    const changeSign = change > 0 ? '+' : '';
    changeText = `\n${changeEmoji} <b>${changeSign}${change.toFixed(4)}</b> (${changeSign}${changePercent.toFixed(2)}%)`;
  }
  
  const message = `üì¢ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

üí± <b>${currency} –∫ BYN</b>
üí∞ <b>${scale} ${currency} = ${rate.toFixed(4)} BYN</b>
${trendEmoji} <b>–¢—Ä–µ–Ω–¥:</b> ${getTrendText(trend)}
${changeText}

üïí <b>–í—Ä–µ–º—è:</b> ${now.toFormat("HH:mm")} (${timezone})
üìÖ <b>–î–∞—Ç–∞:</b> ${now.toFormat("dd.MM.yyyy")}`;

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  const keyboard = new InlineKeyboard()
    .text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", `rate_${currency}`)
    .text("üìä –í—Å–µ –≤–∞–ª—é—Ç—ã", "rate_all")
    .row()
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_notifications")
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

  await bot.api.sendMessage(chatId, message, {
    reply_markup: keyboard,
    parse_mode: "HTML"
  });
}

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞
 */
async function sendChangeNotification(
  bot: Bot,
  chatId: number,
  rateData: any
) {
  const { currency, rate, scale, change, changePercent, trend } = rateData;

  const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚ÜîÔ∏è';
  const changeSign = (typeof change === 'number' && change > 0) ? '+' : '';
  const changeLine = (typeof change === 'number' && typeof changePercent === 'number')
    ? `\n${trendEmoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>${changeSign}${change.toFixed(4)}</b> (${changeSign}${changePercent.toFixed(2)}%)`
    : '';

  const message = `üîî <b>–ö—É—Ä—Å ${currency} –∏–∑–º–µ–Ω–∏–ª—Å—è</b>\n\nüí∞ <b>${scale} ${currency} = ${rate.toFixed(4)} BYN</b>${changeLine}`;

  await bot.api.sendMessage(chatId, message, { parse_mode: "HTML" });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
 */
function getTrendText(trend?: 'up' | 'down' | 'stable'): string {
  switch (trend) {
    case 'up': return '–†–æ—Å—Ç';
    case 'down': return '–ü–∞–¥–µ–Ω–∏–µ';
    case 'stable': return '–°—Ç–∞–±–∏–ª—å–Ω–æ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
