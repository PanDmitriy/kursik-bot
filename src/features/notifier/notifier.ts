import cron from "node-cron";
import { Bot, InlineKeyboard } from "grammy";
import { DateTime } from "luxon";
import { getAllChatIds, getUserSubscriptions, Subscription } from "../../entities/user/user.repo";
import { getExchangeRate, getEnhancedExchangeRate } from "../../shared/api/exchange";


// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
export function startNotifier(bot: Bot) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  cron.schedule("* * * * *", async () => {
    const now = new Date();
    const currentHour = now.getHours();

    // –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–Ω–µ—Ç –º–Ω–æ–≥–æ
    const allChatIds = getAllChatIds(); // —Å–º. –Ω–∏–∂–µ

    for (const chatId of allChatIds) {
      const subs: Subscription[] = getUserSubscriptions(chatId);

        for (const { currency, hour, minute, timezone } of subs) {
          const now = DateTime.now().setZone(timezone);
          if (now.hour === hour && now.minute === minute) {
            const result = await getEnhancedExchangeRate(currency);
            if (!result) continue;
      
            await sendInteractiveNotification(bot, chatId, result, now, timezone);
          }
        }
    }
  });

  console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã");
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
 */
async function sendInteractiveNotification(
  bot: Bot, 
  chatId: number, 
  rateData: any, 
  now: DateTime, 
  timezone: string
) {
  const { currency, rate, scale, change, changePercent, trend } = rateData;
  
  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
  const changeEmoji = trend === 'up' ? 'üü¢' : trend === 'down' ? 'üî¥' : '‚ö™';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  let changeText = '';
  if (change !== undefined && changePercent !== undefined) {
    const changeSign = change > 0 ? '+' : '';
    changeText = `\n${changeEmoji} <b>${changeSign}${change.toFixed(4)}</b> (${changeSign}${changePercent.toFixed(2)}%)`;
  }
  
  const message = `üì¢ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

üí± <b>${currency} –∫ BYN</b>
üí∞ <b>${scale} ${currency} = ${rate.toFixed(4)} BYN</b>
${trendEmoji} <b>–¢—Ä–µ–Ω–¥:</b> ${getTrendText(trend)}
${changeText}

üïí <b>–í—Ä–µ–º—è:</b> ${now.toFormat("HH:mm")} (${timezone})
üìÖ <b>–î–∞—Ç–∞:</b> ${now.toFormat("dd.MM.yyyy")}`;

  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  const keyboard = new InlineKeyboard()
    .text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", `rate_${currency}`)
    .text("üìä –í—Å–µ –≤–∞–ª—é—Ç—ã", "rate_all")
    .row()
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_notifications")
    .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "menu_main");

  await bot.api.sendMessage(chatId, message, {
    reply_markup: keyboard,
    parse_mode: "HTML"
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
 */
function getTrendText(trend?: 'up' | 'down' | 'stable'): string {
  switch (trend) {
    case 'up': return '–†–æ—Å—Ç';
    case 'down': return '–ü–∞–¥–µ–Ω–∏–µ';
    case 'stable': return '–°—Ç–∞–±–∏–ª—å–Ω–æ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
