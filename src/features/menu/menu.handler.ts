import { Context, InlineKeyboard } from "grammy";
import { handleRate } from "../rates/rate.handler";
import { handleSubscribe } from "../subscribe/subscribe.handler";
import { handleListSubscriptions } from "../subscribe/list.handler";
import { handleUnsubscribe } from "../subscribe/unsubscribe.handler";
import { handleSetTimezone } from "../timezone/timezone.handler";
import { getUserSubscriptions, getUserTimezone } from "../../entities/user/user.repo";
import { NavigationManager, NAVIGATION_LEVELS } from "../../shared/utils/navigation";

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
export async function handleMainMenu(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –û—á–∏—â–∞–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  NavigationManager.clearBreadcrumbs(chatId);
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.MAIN);

  const keyboard = new InlineKeyboard()
    .text("üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "menu_rates")
    .row()
    .text("üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "menu_subscriptions")
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu_settings")
    .row()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "menu_stats")
    .text("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "menu_help");

  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  await ctx.reply(
    `${breadcrumbs}üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */
export async function handleMenuCallback(ctx: Context, next: () => Promise<void>) {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith("menu_")) return next();

  await ctx.answerCallbackQuery();

  switch (data) {
    case "menu_main":
      await handleMainMenu(ctx);
      break;
      
    case "menu_rates":
      await handleRate(ctx);
      break;
      
    case "menu_subscriptions":
      await handleListSubscriptions(ctx);
      break;
      
    case "menu_settings":
      await handleSettingsMenu(ctx);
      break;
      
    case "menu_stats":
      await handleStatsMenu(ctx);
      break;
      
    case "menu_help":
      await handleHelpMenu(ctx);
      break;
      
    default:
      await ctx.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
  }
}

/**
 * –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export async function handleSettingsMenu(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.SETTINGS);

  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  const keyboard = new InlineKeyboard()
    .text("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", "settings_timezone")
    .row()
    .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications");

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const navKeyboard = NavigationManager.createNavigationKeyboard(chatId, [
    { text: "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data: "settings_timezone" },
    { text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: "settings_notifications" }
  ]);

  await ctx.reply(
    `${breadcrumbs}‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:`,
    { 
      reply_markup: navKeyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export async function handleStatsMenu(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.STATS);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const subs = getUserSubscriptions(chatId);
  const totalSubs = subs.length;
  
  const navKeyboard = NavigationManager.createNavigationKeyboard(chatId);
  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  await ctx.reply(
    `${breadcrumbs}üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>${totalSubs}</b>
üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç: <b>${new Set(subs.map(s => s.currency)).size}</b>
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>${getUserTimezone(chatId)}</b>

<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>`,
    { 
      reply_markup: navKeyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * –ú–µ–Ω—é –ø–æ–º–æ—â–∏
 */
export async function handleHelpMenu(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.HELP);

  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–º–æ—â–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  const navKeyboard = NavigationManager.createNavigationKeyboard(chatId, [
    { text: "üìã –ö–æ–º–∞–Ω–¥—ã", callback_data: "help_commands" },
    { text: "‚ùì FAQ", callback_data: "help_faq" }
  ]);

  await ctx.reply(
    `${breadcrumbs}‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>

–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:`,
    { 
      reply_markup: navKeyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
 */
export async function handleHelpCommands(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, "–ö–æ–º–∞–Ω–¥—ã");

  const navKeyboard = NavigationManager.createNavigationKeyboard(chatId, [
    { text: "‚ùì FAQ", callback_data: "help_faq" }
  ]);
  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  await ctx.reply(
    `${breadcrumbs}üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>
/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/rate ‚Äî –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
/subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe ‚Äî –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
/subscriptions ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
/set_timezone ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

<b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º`,
    { 
      reply_markup: navKeyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * FAQ
 */
export async function handleHelpFaq(ctx: Context) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  NavigationManager.addBreadcrumb(chatId, "FAQ");

  const navKeyboard = NavigationManager.createNavigationKeyboard(chatId, [
    { text: "üìã –ö–æ–º–∞–Ω–¥—ã", callback_data: "help_commands" }
  ]);
  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  await ctx.reply(
    `${breadcrumbs}‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?</b>
‚Ä¢ –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—É—Ä—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –í—Ä–µ–º—è —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

<b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?</b>
‚Ä¢ –û—Ç–º–µ–Ω–∏ —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /unsubscribe
‚Ä¢ –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /subscribe

<b>–û—Ç–∫—É–¥–∞ –±–µ—Ä—É—Ç—Å—è –∫—É—Ä—Å—ã?</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–ë
‚Ä¢ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>
USD, EUR, RUB, CNY, PLN`,
    { 
      reply_markup: navKeyboard,
      parse_mode: "HTML"
    }
  );
}

