import { Context, Keyboard } from "grammy";
import tzLookup from "tz-lookup";
import { setUserTimezone } from "../../entities/user/user.repo";

const popularZones = [
  "Europe/Minsk",
  "Europe/Moscow",
  "Europe/Kiev",
  "Europe/Vilnius",
  "Asia/Almaty",
];

export async function handleSetTimezone(ctx: Context) {
  const keyboard = new Keyboard()
    .requestLocation("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    .row()
    .text("üóÇ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
    .resized();

  await ctx.reply("–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å?", {
    reply_markup: keyboard,
  });
}

export async function handleLocation(ctx: Context) {
  const location = ctx.message?.location;
  const chatId = ctx.chat?.id;
  if (!location || !chatId) return;

  try {
    const timezone = tzLookup(location.latitude, location.longitude);
    setUserTimezone(chatId, timezone);

    await ctx.reply(`‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezone}`);
  } catch (err) {
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.");
  }
}

export async function handleManualTimezone(ctx: Context) {
  const keyboard = new Keyboard();
  for (const zone of popularZones) {
    keyboard.text(zone);
  }

  await ctx.reply("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:", {
    reply_markup: keyboard.resized(),
  });
}

export async function handleTimezoneText(ctx: Context) {
  const timezone = ctx.message?.text;
  const chatId = ctx.chat?.id;

  if (!timezone || !chatId) return;

  if (!popularZones.includes(timezone)) {
    return ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
  }

  setUserTimezone(chatId, timezone);
  await ctx.reply(`‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezone}`);
}
