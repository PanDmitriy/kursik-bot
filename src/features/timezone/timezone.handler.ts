import { Context, Keyboard, InlineKeyboard } from "grammy";
import tzLookup from "tz-lookup";
import { setUserTimezone } from "../../entities/user/user.repo";
import { TimezoneService } from "../../shared/services/timezone.service";
import { 
  clearTimezoneMessages, 
  sendTrackedMessage, 
  editTrackedMessage,
  clearTimezoneMessagesList 
} from "../../shared/utils/message-manager";

export async function handleSetTimezone(ctx: Context) {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  await clearTimezoneMessages(ctx);

  const keyboard = new Keyboard()
    .requestLocation("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    .row()
    .text("üóÇ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
    .row()
    .text("üîç –ü–æ–∏—Å–∫ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")
    .resized();

  await sendTrackedMessage(
    ctx,
    `üåç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>

–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:

üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è</b> ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
üóÇ <b>–°–ø–∏—Å–æ–∫</b> ‚Äî –≤—ã–±–æ—Ä –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
üîç <b>–ü–æ–∏—Å–∫</b> ‚Äî –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

<i>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç.</i>`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleLocation(ctx: Context) {
  const location = ctx.message?.location;
  const chatId = ctx.chat?.id;
  if (!location || !chatId) return;

  try {
    const timezone = tzLookup(location.latitude, location.longitude);
    
    if (!TimezoneService.isValidTimezone(timezone)) {
      await sendTrackedMessage(ctx, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.");
      return;
    }

    const timezoneInfo = TimezoneService.getTimezoneInfo(timezone);
    setUserTimezone(chatId, timezone);

    const currentTime = TimezoneService.getCurrentTimeInTimezone(timezone);
    
    await sendTrackedMessage(
      ctx,
      `‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>

üåç <b>${timezoneInfo?.displayName}</b>
üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>${currentTime}</code>

–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.`,
      { parse_mode: "HTML" }
    );
  } catch (err) {
    await sendTrackedMessage(ctx, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.");
  }
}

export async function handleManualTimezone(ctx: Context) {
  const popularTimezones = TimezoneService.getPopularTimezones();
  
  const keyboard = new InlineKeyboard();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
  for (let i = 0; i < popularTimezones.length; i += 2) {
    const row = [];
    
    // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    const tz1 = popularTimezones[i];
    row.push({ text: `üåç ${tz1.name}`, callback_data: `tz_${tz1.id}` });
    
    // –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (i + 1 < popularTimezones.length) {
      const tz2 = popularTimezones[i + 1];
      row.push({ text: `üåç ${tz2.name}`, callback_data: `tz_${tz2.id}` });
    }
    
    keyboard.row(...row);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
  keyboard.row({ text: "üóÇ –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã", callback_data: "tz_regions" });

  await sendTrackedMessage(
    ctx,
    `üóÇ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞</b>

–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleTimezoneSearch(ctx: Context) {
  await sendTrackedMessage(
    ctx,
    `üîç <b>–ü–æ–∏—Å–∫ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>

–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –õ–æ–Ω–¥–æ–Ω, –¢–æ–∫–∏–æ, –ù—å—é-–ô–æ—Ä–∫</i>`,
    { parse_mode: "HTML" }
  );
}

export async function handleTimezoneSearchQuery(ctx: Context) {
  const query = ctx.message?.text?.trim();
  const chatId = ctx.chat?.id;
  
  if (!query || !chatId) return;

  const results = TimezoneService.searchTimezones(query);
  
  if (results.length === 0) {
    await sendTrackedMessage(
      ctx,
      `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

–ü–æ –∑–∞–ø—Ä–æ—Å—É "<i>${query}</i>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.`,
      { parse_mode: "HTML" }
    );
    return;
  }

  const keyboard = new InlineKeyboard();
  
  for (const timezone of results.slice(0, 8)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    keyboard.row({ 
      text: `üåç ${timezone.displayName}`, 
      callback_data: `tz_${timezone.id}` 
    });
  }

  await sendTrackedMessage(
    ctx,
    `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>

–ù–∞–π–¥–µ–Ω–æ ${results.length} —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "<i>${query}</i>":`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleTimezoneRegions(ctx: Context) {
  const regions = TimezoneService.getTimezoneGroups();
  const keyboard = new InlineKeyboard();
  
  for (const [regionName, timezones] of Object.entries(regions)) {
    keyboard.row({ 
      text: `üåç ${regionName} (${timezones.length})`, 
      callback_data: `tz_region_${regionName}` 
    });
  }
  
  keyboard.row({ text: "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º", callback_data: "tz_popular" });

  await sendTrackedMessage(
    ctx,
    `üóÇ <b>–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã</b>

–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleTimezoneRegion(ctx: Context, regionName: string) {
  const regions = TimezoneService.getTimezoneGroups();
  const timezones = regions[regionName];
  
  if (!timezones) {
    await sendTrackedMessage(ctx, "‚ö†Ô∏è –†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    return;
  }

  const keyboard = new InlineKeyboard();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞
  for (const timezoneId of timezones.slice(0, 10)) {
    const timezoneInfo = TimezoneService.getTimezoneInfo(timezoneId);
    if (timezoneInfo) {
      keyboard.row({ 
        text: `üåç ${timezoneInfo.displayName}`, 
        callback_data: `tz_${timezoneId}` 
      });
    }
  }
  
  keyboard.row({ text: "üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data: "tz_regions" });

  await sendTrackedMessage(
    ctx,
    `üåç <b>${regionName}</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

export async function handleTimezoneCallback(ctx: Context, timezoneId: string) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  if (!TimezoneService.isValidTimezone(timezoneId)) {
    await ctx.answerCallbackQuery("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å");
    return;
  }

  const timezoneInfo = TimezoneService.getTimezoneInfo(timezoneId);
  if (!timezoneInfo) {
    await ctx.answerCallbackQuery("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ");
    return;
  }

  setUserTimezone(chatId, timezoneId);
  const currentTime = TimezoneService.getCurrentTimeInTimezone(timezoneId);

  // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
  await clearTimezoneMessages(ctx);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
  await ctx.reply(
    `‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>

üåç <b>${timezoneInfo.displayName}</b>
üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>${currentTime}</code>

–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.`,
    { parse_mode: "HTML" }
  );

  await ctx.answerCallbackQuery("‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
}

export async function handleTimezoneText(ctx: Context) {
  const timezone = ctx.message?.text;
  const chatId = ctx.chat?.id;

  if (!timezone || !chatId) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
  if (TimezoneService.isValidTimezone(timezone)) {
    const timezoneInfo = TimezoneService.getTimezoneInfo(timezone);
    if (timezoneInfo) {
      setUserTimezone(chatId, timezone);
      const currentTime = TimezoneService.getCurrentTimeInTimezone(timezone);
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
      await clearTimezoneMessages(ctx);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
      await ctx.reply(
        `‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>

üåç <b>${timezoneInfo.displayName}</b>
üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <code>${currentTime}</code>`,
        { parse_mode: "HTML" }
      );
      return;
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  await handleTimezoneSearchQuery(ctx);
}
