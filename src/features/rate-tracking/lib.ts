import { getEnhancedExchangeRate } from "./api";
import { EnhancedExchangeRate } from "../../entities/currency/model";
import { AVAILABLE_CURRENCIES } from "../../entities/currency/model";

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤—Å–µ—Ö –≤–∞–ª—é—Ç
 */
export async function getAllRates(): Promise<EnhancedExchangeRate[]> {
  const rates: EnhancedExchangeRate[] = [];
  
  for (const currency of AVAILABLE_CURRENCIES) {
    try {
      const rate = await getEnhancedExchangeRate(currency.code);
      if (rate) {
        rates.push(rate);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${currency.code}:`, error);
    }
  }
  
  return rates;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
 */
export function formatAllRates(rates: EnhancedExchangeRate[]): string {
  if (rates.length === 0) {
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç";
  }
  
  const lines = rates.map(rate => {
    const { currency, rate: value, scale, change, changePercent, trend } = rate;
    const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
    const changeEmoji = trend === 'up' ? 'üü¢' : trend === 'down' ? 'üî¥' : '‚ö™';
    
    let changeText = '';
    if (change !== undefined && changePercent !== undefined) {
      const changeSign = change > 0 ? '+' : '';
      changeText = ` ${changeEmoji}${changeSign}${changePercent.toFixed(1)}%`;
    }
    
    return `${trendEmoji} <b>${currency}</b>: ${value.toFixed(4)} BYN${changeText}`;
  });
  
  return `üí± <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ BYN</b>

${lines.join('\n')}

üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}
üèõÔ∏è <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ù–ë–†–ë`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
 */
export function formatEnhancedRate(data: EnhancedExchangeRate): string {
  const { rate, scale, currency, change, changePercent, trend, date } = data;
  
  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  const trendEmoji = trend === 'up' ? 'üìà' : trend === 'down' ? 'üìâ' : '‚û°Ô∏è';
  
  // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏)
  const changeEmoji = trend === 'up' ? 'üü¢' : trend === 'down' ? 'üî¥' : '‚ö™';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  let changeText = '';
  if (change !== undefined && changePercent !== undefined) {
    const changeSign = change > 0 ? '+' : '';
    changeText = `\n${changeEmoji} <b>${changeSign}${change.toFixed(4)}</b> (${changeSign}${changePercent.toFixed(2)}%)`;
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formattedDate = new Date(date).toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
  
  return `üí± <b>${currency} –∫ BYN</b>

üí∞ <b>${scale} ${currency} = ${rate.toFixed(4)} BYN</b>
${trendEmoji} <b>–¢—Ä–µ–Ω–¥:</b> ${getTrendText(trend)}
${changeText}

üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate}
üèõÔ∏è <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ù–ë–†–ë`;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
 */
function getTrendText(trend?: 'up' | 'down' | 'stable'): string {
  switch (trend) {
    case 'up': return '–†–æ—Å—Ç';
    case 'down': return '–ü–∞–¥–µ–Ω–∏–µ';
    case 'stable': return '–°—Ç–∞–±–∏–ª—å–Ω–æ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
