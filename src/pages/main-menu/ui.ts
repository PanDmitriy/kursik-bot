import { Context, InlineKeyboard } from "grammy";
import { NavigationManager, NAVIGATION_LEVELS } from "../../shared/lib/navigation";
import { handleRate } from "../rates/ui";
import { handleListSubscriptions } from "../subscriptions/ui";
import { handleSettingsMenu, handleStatsMenu, handleHelpMenu } from "../settings/ui";

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
export async function handleMainMenu(ctx: Context): Promise<void> {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  // –û—á–∏—â–∞–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  NavigationManager.clearBreadcrumbs(chatId);
  NavigationManager.addBreadcrumb(chatId, NAVIGATION_LEVELS.MAIN);

  const keyboard = new InlineKeyboard()
    .text("üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "menu_rates")
    .row()
    .text("üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "menu_subscriptions")
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu_settings")
    .row()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "menu_stats")
    .text("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "menu_help");

  const breadcrumbs = NavigationManager.formatBreadcrumbs(chatId);

  await ctx.reply(
    `${breadcrumbs}üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:`,
    { 
      reply_markup: keyboard,
      parse_mode: "HTML"
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
 */
export async function handleMenuCallback(ctx: Context, next: () => Promise<void>): Promise<void> {
  const data = ctx.callbackQuery?.data;
  if (!data?.startsWith("menu_")) return next();

  await ctx.answerCallbackQuery();

  switch (data) {
    case "menu_main":
      await handleMainMenu(ctx);
      break;
      
    case "menu_rates":
      await handleRate(ctx);
      break;
      
    case "menu_subscriptions":
      await handleListSubscriptions(ctx);
      break;
      
    case "menu_settings":
      await handleSettingsMenu(ctx);
      break;
      
    case "menu_stats":
      await handleStatsMenu(ctx);
      break;
      
    case "menu_help":
      await handleHelpMenu(ctx);
      break;
      
    default:
      await ctx.reply("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
  }
}
